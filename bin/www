#!/usr/bin/env node
const http = require('http');

const app = require('../app');
const config = require('../config');

const appLogger = config.logger('app');
const port = config.port;
const server = http.createServer(app);

// Entrypoint
Promise
  .resolve()
  .then(app.start)
  .then(startServer);

/**
 * Starts the server.
 */
function startServer() {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Event listener called if the server fails to start.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      appLogger.fatal(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      appLogger.fatal(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener called if the server starts successfully.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  appLogger.info(`Listening on ${bind}`);
}
